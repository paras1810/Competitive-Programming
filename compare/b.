struct Query{
    int l,r,index;
};

const int MAXN = 1e5 + 5;
const int K = 320;
int a[MAXN], cnt[MAXN], ans[MAXN], cans, n,m;
Query q[MAXN];

inline void add(int index) {
	if (a[index] >= MAXN) { return; }
	cans -= (cnt[a[index]] == a[index]);
	cnt[a[index]]++;
	cans += (cnt[a[index]] == a[index]);
}

inline void del(int index) {
	if (a[index] >= MAXN) { return; }
	cans -= (cnt[a[index]] == a[index]);
	cnt[a[index]]--;
	cans += (cnt[a[index]] == a[index]);
}

inline int getAns(){
    return cans;
}

bool comp(Query x, Query y){
    if(x.l/K != y.l/K)return x.l < y.l;
    return x.r < y.r; 
}

signed main(){
    cin >> n >> m;
    loop(i,0,n)cin >> a[i];
    loop(i,0,m){
        cin >> q[i].l >> q[i].r;
        q[i].index = i;
    }
    sort(q,q+m,comp);
    int curL = 1, curR = 0;
    loop(i,0,m){
        int L = q[i].l-1, R = q[i].r-1;
        while(curL > L)add(--curL);
        while(curR < R)add(++curR);
        while(curL < L)add(curL++);
        while(curR > R)add(curR--);
        ans[q[i].index] = getAns();
    }
    loop(i,0,m){
        cout << ans[i] << endl;
    }
}
