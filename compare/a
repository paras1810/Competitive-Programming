struct Query { 
    int l, r, index; 
};

const int MAXN = 1e5 + 5;
const int K = 320;
int a[MAXN], cnt[MAXN], ans[MAXN], cans, n, m;
Query q[MAXN];

inline void add(int index) {
	if (a[index] >= MAXN) { return; }
	cans -= (cnt[a[index]] == a[index]);
	cnt[a[index]]++;
	cans += (cnt[a[index]] == a[index]);
}

inline void del(int index) {
	if (a[index] >= MAXN) { return; }
	cans -= (cnt[a[index]] == a[index]);
	cnt[a[index]]--;
	cans += (cnt[a[index]] == a[index]);
}

inline int get_ans() { return cans; }



bool comp(Query x, Query y){
    if(x.l/K != y.l/K)return x.l < y.l;
    return x.r < y.r; 
}


signed main() {
	scanf("%d%d", &n, &m);
	for (int i = 0; i < n; ++i) scanf("%d", a + i);
	for (int i = 0; i < m; ++i) {
		scanf("%d%d", &q[i].l, &q[i].r);
		q[i].index = i;
	}
	sort(q, q + m,comp);
	int a = 1, b = 0;
	for (int i = 0; i < m; ++i) {
		const int l = q[i].l - 1, r = q[i].r - 1;
		while (a > l) { add(--a); }
		while (b < r) { add(++b); }
		while (a < l) { del(a++); }
		while (b > r) { del(b--); }
		ans[q[i].index] = get_ans();
	}
	for (int i = 0; i < m; ++i) {
		printf("%d\n", ans[i]);
	}
	return 0;
}